View
View()
?Vieew
?View
args(View)
args(round)
knitr::opts_chunk$set(echo = TRUE)
example("round")
example("plot")
round(3.14159, digits=2)
getwd()
# prepping data for heatmap visualization
# read in unfiltered matrix that was created earlier
unfilter_matrix <- read.csv("NC_T0vsT96_unfiltered_matrix.csv", header = T)
# prepping data for heatmap visualization
# read in unfiltered matrix that was created earlier
unfilter_matrix <- read.csv("NC_T0vsT96_unfiltered_matrix.csv", header = T)
head(unfilter_matrix)
str(unfilter_matrix)
# add column of determining if gene is diff expressed
threshold_padj <- unfilter_matrix$padj < 0.05
# number of diff expressed genes = 3059
threshold_padj %>%
which() %>%
length()
# loading required packages
pacman::p_load(DESeq2, dplyr, tidyr, ggplot2, genekitr, pheatmap,
RColorBrewer, clusterProfiler, DOSE,
ggnewscale, enrichplot, knitr, cowplot, msigdbr, pathview,
patchwork, ggplotify)
# prepping data for heatmap visualization
# read in unfiltered matrix that was created earlier
unfilter_matrix <- read.csv("NC_T0vsT96_unfiltered_matrix.csv", header = T)
head(unfilter_matrix)
str(unfilter_matrix)
# add column of determining if gene is diff expressed
threshold_padj <- unfilter_matrix$padj < 0.05
# number of diff expressed genes = 3059
threshold_padj %>%
which() %>%
length()
# add col determining diff expression to unfilter_matrix
unfilter_matrix$threshold <- threshold_padj
str(unfilter_matrix)
# add a column to specify up/down-reg
unfilter_matrix$diffexpressed <- "Unchanged"
# if log2FC > 1 and padj < 0.05 set as upregulated
unfilter_matrix$diffexpressed[unfilter_matrix$padj < 0.05 & unfilter_matrix$log2FoldChange > 1] <- "Upregulated"
# if log2FC > -1 and padj < 0.05 set as downregulated
unfilter_matrix$diffexpressed[unfilter_matrix$padj < 0.05 & unfilter_matrix$log2FoldChange < -1] <- "Downregulated"
resdata_sig <- as.data.frame(unfilter_matrix) %>%
dplyr::filter(abs(log2FoldChange) > 1 & padj < 0.05) %>%
dplyr::select(2:16)
#head(resdata_sig)
# save DEGS to file
#write.csv(resdata_sig, file="NC_T0vsT96_DEG.csv")
resdata <- read.csv("NC_T0vsT96_unfiltered_matrix.csv", header = T)
# load count matrix
counts <- read.table("salmon.merged.gene_counts.tsv", header = T)
# load count matrix
counts <- read.table("salmon.merged.gene_counts.tsv", header = T)
# keep gene_id col as names of rows
row.names(counts) <- counts$gene_id
# preview counts matrix with all samples
head(counts)
# create separate counts matrix for Tfh samples only
counts_tfh <- counts %>%
dplyr::select(3:8) %>%
round()
# preview to make sure as expected
head(counts_tfh)
# treatment vector for coldata df
time <-
rep(c("T0","T96"), 3) %>%
factor() %>%
sort()
# replicate vector for coldata df
replicate <- rep(c(1,2,3), 2) %>%
factor()
# coldata to create dds object
coldata <- data.frame(time, replicate)
# create the dds object
dds <- DESeqDataSetFromMatrix(countData = counts_tfh,
colData = coldata,
design = ~ replicate + time)
# filtering dds, keep rows with at least 10 reads total
keep <- dds %>%
counts() %>%
rowSums() >= 20
dds <- dds[keep,]
# re-level the treatment variable to make T0 the reference
dds$time <-
dds$time %>%
relevel(ref = "T0")
# DESeq analysis
dds <- dds %>%
DESeq()
# extract results from DESeq
res <- dds %>%
results(contrast = c("time",
"T96",
"T0"))
res %>%
dim() # 16062 x 6
# order results from smallest to largest p-adjusted value
result <- res[res$padj %>%
order(), ]
head(result)
# number significant/non-significant padj, alpha = .05
(result$padj < .05) %>%
table()
# merge the result object and counts data frame
resdata <- merge(as.data.frame(result),
as.data.frame(counts(dds, normalized = T)),
by = "row.names",
sort = F)
names(resdata)[1] <- "Gene_id"
head(resdata)
# write resdata to file called unfiltered results
#resdata %>%
#write.csv(file = "NC_T0vsT96_unfiltered_matrix.csv")
# plotting downregulated gene
p = plotCounts(dds, gene="Stmn2", intgroup = "time", returnData = TRUE) %>%
ggplot() + aes(time, count) + geom_boxplot(aes(fill=time))  + theme_bw()
Stmn2 <- p + geom_jitter(shape=16, position=position_jitter(0.2)) + labs(title="Stmn2 expression") + theme_bw() + theme(plot.title = element_text(hjust = 0.5))
Stmn2
# plotting downregulated gene
p = plotCounts(dds, gene="Stmn2", intgroup = "time", returnData = TRUE) %>%
ggplot() + aes(time, count) + geom_boxplot(aes(fill=time))  + theme_bw()
Stmn2 <- p + geom_jitter(shape=16, position=position_jitter(0.2)) + labs(title="Stmn2 expression") + theme_bw() + theme(plot.title = element_text(hjust = 0.5))
Stmn2
ggsave("Stmn2-gene.pdf", height = 3, width = 3)
knitr::opts_chunk$set(echo = TRUE)
install.packages(c("BiocManager", "RColorBrewer",
"tidyverse", "devtools", "pheatmap",
"gprofiler2", "dply"))
install.packages(c("BiocManager", "RColorBrewer", "tidyverse", "devtools", "pheatmap", "gprofiler2", "dply"))
knitr::opts_chunk$set(echo = TRUE)
BiocManager::install("genekitr")
BiocManager::install("DESeq2")
BiocManager::install("org.Hs.eg.db")
BiocManager::install("EnhancedVolcano")
BiocManager::install("hypeR")
library(RColorBrewer)
library(tidyverse)
library(devtools)
library(pheatmap)
library(gprofiler2)
library(genekitr) #if this doesn't work its okay! Email me.
library(DESeq2)
library(org.Hs.eg.db)
library(EnhancedVolcano)
library(hypeR)
library(dplyr)
library(RColorBrewer)
library(tidyverse)
library(devtools)
library(pheatmap)
library(gprofiler2)
library(genekitr) #if this doesn't work its okay! Email me.
library(DESeq2)
library(org.Hs.eg.db)
library(EnhancedVolcano)
library(hypeR)
library(dplyr)
knitr::opts_chunk$set(echo = TRUE)
#saveRDS(meta, file = "meta.RDS")
meta <- readRDS("meta.RDS")
#this is the metadata - it describes our data!
# read-in counts matrix
data <- read.table(file = "SRP136102.tsv",
sep = "\t",
stringsAsFactors = FALSE,
header = TRUE,
row.names = 1)
head(data)
# check identical
identical(colnames(data), meta$Sample)
# change column names
meta$ColNames <- paste(meta$Treatment, meta$Replicate, sep = "_")
colnames(data) <- meta$ColNames
colnames(data)
head(data)
#dimensions
dim(data)
summary(data)
#barplot of total reads
barplot(colSums(data), las=2)
#This calculates the sum of each column in the data frame. The result is a vector where each element represents the total of a column.
barcolors <- c(rep("red", 6), rep("lightblue", 6))
#pdf("barplot.pdf", width=6, height=4)  # Set appropriate size
barplot(colSums(data),
las=2,
xlab="Samples",
ylab="Total Counts",
col=barcolors,
cex.names=0.6,
cex.axis=0.6,
space=0.3)
#dev.off()
boxplot(colSums(data) ~ meta$Treatment)
t.test(colSums(data) ~ meta$Treatment)
# Install CRAN packages
#install.packages(c("BiocManager", "RColorBrewer",
#"tidyverse", "devtools", "pheatmap",
#"gprofiler2", "dplyr", "ggrepel", "usethis", "ggplot2", "igraph", "tidygraph"))
#install.packages("genekitr", dependencies = TRUE, INSTALL_opts = '--no-lock')
# Install Bioconductor packages
#BiocManager::install(c("DESeq2", "AnnotationDbi", "org.Hs.eg.db", "EnhancedVolcano", "hypeR"))
library(DESeq2)
library(RColorBrewer)
library(pheatmap)
library(ggplot2)
library(genekitr)
#library(EnhancedVolcano)
head(data)
# round all expression counts
data <- round(data)
#data
dds <- DESeqDataSetFromMatrix(countData = data,
colData = meta,
design = ~ Treatment)
dds
##pre-filter to remove low-read rows
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
dds$Treatment <- relevel(dds$Treatment, ref = "Normal")
##run Differential Expression Analysis
dds <- DESeq(dds)
res <- results(dds)
head(res)
dim(res)
# SLE vs normal
sle_n_res <- results(dds, contrast = c("Treatment", "SLE", "Normal"))
# Merge all results with normalized counts
sle_n_res_data <- merge(as.data.frame(sle_n_res),
as.data.frame(counts(dds, normalized = TRUE)),
by = "row.names", sort = FALSE)
names(sle_n_res_data)[1] <- "Ensembl_ID"
# Display the head of the results
head(sle_n_res_data)
str(sle_n_res_data)
ids <- sle_n_res_data$Ensembl_ID
gene_symbol_map <- transId(ids, transTo = "symbol") #default is human!
head(gene_symbol_map)
str(sle_n_res_data)
sle_n_res_data <- dplyr::left_join(sle_n_res_data,gene_symbol_map,
by=c('Ensembl_ID'='input_id'))
str(sle_n_res_data)
#output tabular files
#write.csv(sle_n_res_data,
#quote = FALSE,
#file = "sle_vs_normal_normalized_matrix.csv")
#Filter for significant results - which genes are statistically significant between the two groups being compared?
sle_n_sigs <- subset(sle_n_res_data, padj < 0.05 & abs(log2FoldChange) > 1)
#write.csv(sle_n_sigs,
# quote = FALSE,
#file = "sle_vs_normal_deg_padj0.05_log2fc1.csv")
sessionInfo()
meta$treatment
View(meta)
View(sle_n_res_data)
knitr::opts_chunk$set(echo = TRUE,
message = FALSE,
warning = FALSE)
EnhancedVolcano(sle_n_res_data,
lab = as.character(sle_n_res_data$Ensembl_I),
x = 'log2FoldChange',
y = 'padj')
EnhancedVolcano(sle_n_res_data,
lab = as.character(sle_n_res_data$Ensembl_ID),
x = 'log2FoldChange',
y = 'padj')
library(EnhancedVolcano)
EnhancedVolcano(sle_n_res_data,
lab = as.character(sle_n_res_data$Ensembl_I),
x = 'log2FoldChange',
y = 'padj')
EnhancedVolcano(sle_n_res_data,
lab = as.character(sle_n_res_data$Ensemb),
x = 'log2FoldChange',
y = 'padj')
EnhancedVolcano(sle_n_res_daa,
#lab = as.character(sle_n_res_data$Ensemb),
x = 'log2FoldChange',
y = 'padj')
meta$Treatment
meta2 <- meta$Treatment
View(meta)
head(meta$Treatment)
View(meta$Treatment)
meta$Treatment
knitr::opts_chunk$set(echo = TRUE)
meta <- read.table(file = "metadata_SRP049019.tsv",
sep = "\t",
stringsAsFactors = FALSE,
header = TRUE)
#meta
View(meta)
# read-in counts matrix
data <- read.table(file = "SRP049019.tsv",
sep = "\t",
stringsAsFactors = FALSE,
header = TRUE,
row.names = 1)
head(data)
# check identical
identical(colnames(data), meta$Sample)
View(data)
#barplot of total reads
barplot(colSums(data), las=2)
#This calculates the sum of each column in the data frame. The result is a vector where each element represents the total of a column.
barcolors <- c(rep("red", 6), rep("lightblue", 6), rep("green", 6))
#pdf("barplot.pdf", width=6, height=4)  # Set appropriate size
barplot(colSums(data),
las=2,
xlab="Samples",
ylab="Total Counts",
col=barcolors,
cex.names=0.6,
cex.axis=0.6,
space=0.3)
#dev.off()
barcolors <- c(rep("red", 6), rep("lightblue", 6), rep("green", 6))
#pdf("barplot.pdf", width=6, height=4)  # Set appropriate size
barplot(colSums(data),
las=2,
xlab="Samples",
ylab="Total Counts",
col=barcolors,
cex.names=0.6,
cex.axis=0.6,
space=0.3)
#dev.off()
barcolors <- c(rep("red", 4), rep("lightblue", 4), rep("green", 4))
#pdf("barplot.pdf", width=6, height=4)  # Set appropriate size
barplot(colSums(data),
las=2,
xlab="Samples",
ylab="Total Counts",
col=barcolors,
cex.names=0.6,
cex.axis=0.6,
space=0.3)
#dev.off()
setwd("~/Documents/GitHub/MMG3320-5320/docs/ch03")
